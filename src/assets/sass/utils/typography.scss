@use 'sass:math';

////
/// Calculates rem size from pixel size
///
/// @param {Number} $size - Size in pixels
///
/// @return {Number} - Corresponding size in rem
////
@function calculate-rem($size) {
  $remSize: math.div($size, 16px);
  @return $remSize * 1rem;
}

////
/// Sets CSS declarations for font-size in rem units from pixel units
///
/// @param {Number} $size - Font size in pixels
/// @param {Number} $line - Line height in pixels
/// @param {Number|Bool} $letter-spacing - Letter spacing in pixels or false
/// @param {Bool|Map} $margins - False or map of `top` and `bottom` margin values (multipliers) based on line-height. ex: ('top': 1, 'bottom': 1)
/// @param {Bool} $margins-inside - `true` to apply margins to content elements inside or `false` to apply margins to element
/// @param {Bool} $contain-margins - `true` to contain margins
////
@mixin typography-setup(
  $size: 16px,
  $line: 20px,
  $letter-spacing: false,
  $margins: false,
  $margins-inside: false,
  $margins-inside-direct-child-only: true,
  $contain-margins: false
) {
  font-size: calculate-rem($size);

  @if $line {
    line-height: math.div($line, $size);

    @if $margins {
      @if $margins-inside {
        $block-els-list: if(
          $margins-inside-direct-child-only,
          $all-md-block-child-els,
          $all-md-block-els
        );

        #{$block-els-list} {
          @each $key, $val in $margins {
            margin-#{$key}: #{($size * ($line / $size) * $val) / $size}#{'em'};
          }

          @if $contain-margins {
            @include contain-margins;
          }
        }
      } @else {
        @each $key, $val in $margins {
          margin-#{$key}: #{($size * ($line / $size) * $val) / $size}#{'em'};
        }

        @if $contain-margins {
          @include contain-margins;
        }
      }
    }
  }

  @if $letter-spacing and $letter-spacing != 0px and $letter-spacing != 0 {
    // stylelint-disable-line
    letter-spacing: ($letter-spacing / $size) + em;
  }
}

////
/// Get 1em equivalent based on line-height
////
@function line-height-em($list) {
  @return (nth($list, 2) / nth($list, 1)) * 1em;
}
